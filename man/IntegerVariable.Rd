% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/integer_variable.R
\name{IntegerVariable}
\alias{IntegerVariable}
\title{Integer Variable Class}
\description{
Represents a integer-valued variable for an individual.
This class is similar to \code{\link[individual]{CategoricalVariable}},
but can be used for variables with unbounded ranges, or other situations where part
of an individual's state is better represented by an integer, such as
household or age bin.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{IntegerVariable$new()}}
\item \href{#method-get_values}{\code{IntegerVariable$get_values()}}
\item \href{#method-get_index_of}{\code{IntegerVariable$get_index_of()}}
\item \href{#method-queue_update}{\code{IntegerVariable$queue_update()}}
\item \href{#method-.update}{\code{IntegerVariable$.update()}}
\item \href{#method-clone}{\code{IntegerVariable$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new IntegerVariable
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IntegerVariable$new(initial_values)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{initial_values}}{a vector of the initial value for each which will be coerced to integer type
individual}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_values"></a>}}
\if{latex}{\out{\hypertarget{method-get_values}{}}}
\subsection{Method \code{get_values()}}{
get the variable values
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IntegerVariable$get_values(index = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index}}{optionally return a subset of the variable vector}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_index_of"></a>}}
\if{latex}{\out{\hypertarget{method-get_index_of}{}}}
\subsection{Method \code{get_index_of()}}{
return a bitset for individuals with some subset of values
Either search for indices corresponding to values in \code{set}, or
for indices corresponding to values in range [a,b].
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IntegerVariable$get_index_of(set = NULL, a = NULL, b = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{set}}{a vector of values}

\item{\code{a}}{lower bound}

\item{\code{b}}{upper bound}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-queue_update"></a>}}
\if{latex}{\out{\hypertarget{method-queue_update}{}}}
\subsection{Method \code{queue_update()}}{
Queue an update for a variable. There are 4 types of variable update:

1. Subset update. The index vector represents a subset of the variable to
update. The value vector, of the same size, represents the new values for
that subset
2. Subset fill. The index vector represents a subset of the variable to
update. The value vector, of size 1, will fill the specified subset
3. Variable reset. The index vector is set to `NULL` and the value vector
replaces all of the current values in the simulation. The value vector
should match the size of the population.
4. Variable fill. The index vector is set to `NULL` and the value vector,
of size 1, is used to fill all of the variable values in the population.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IntegerVariable$queue_update(values, index = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{values}}{a vector or scalar of values to assign at the index}

\item{\code{index}}{is the index at which to apply the change, use NULL for the
fill options}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-.update"></a>}}
\if{latex}{\out{\hypertarget{method-.update}{}}}
\subsection{Method \code{.update()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IntegerVariable$.update()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IntegerVariable$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
