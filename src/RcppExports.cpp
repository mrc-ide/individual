// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/individual.h"
#include "../inst/include/individual_types.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// create_bitset
Rcpp::XPtr<individual_index_t> create_bitset(size_t size);
RcppExport SEXP _individual_create_bitset(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(create_bitset(size));
    return rcpp_result_gen;
END_RCPP
}
// bitset_copy
Rcpp::XPtr<individual_index_t> bitset_copy(const Rcpp::XPtr<individual_index_t> b);
RcppExport SEXP _individual_bitset_copy(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<individual_index_t> >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(bitset_copy(b));
    return rcpp_result_gen;
END_RCPP
}
// bitset_insert
void bitset_insert(const Rcpp::XPtr<individual_index_t> b, std::vector<size_t> v);
RcppExport SEXP _individual_bitset_insert(SEXP bSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<individual_index_t> >::type b(bSEXP);
    Rcpp::traits::input_parameter< std::vector<size_t> >::type v(vSEXP);
    bitset_insert(b, v);
    return R_NilValue;
END_RCPP
}
// bitset_remove
void bitset_remove(const Rcpp::XPtr<individual_index_t> b, std::vector<size_t> v);
RcppExport SEXP _individual_bitset_remove(SEXP bSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<individual_index_t> >::type b(bSEXP);
    Rcpp::traits::input_parameter< std::vector<size_t> >::type v(vSEXP);
    bitset_remove(b, v);
    return R_NilValue;
END_RCPP
}
// bitset_size
size_t bitset_size(const Rcpp::XPtr<individual_index_t> b);
RcppExport SEXP _individual_bitset_size(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<individual_index_t> >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(bitset_size(b));
    return rcpp_result_gen;
END_RCPP
}
// bitset_max_size
size_t bitset_max_size(const Rcpp::XPtr<individual_index_t> b);
RcppExport SEXP _individual_bitset_max_size(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<individual_index_t> >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(bitset_max_size(b));
    return rcpp_result_gen;
END_RCPP
}
// bitset_and
void bitset_and(const Rcpp::XPtr<individual_index_t> a, const Rcpp::XPtr<individual_index_t> b);
RcppExport SEXP _individual_bitset_and(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<individual_index_t> >::type a(aSEXP);
    Rcpp::traits::input_parameter< const Rcpp::XPtr<individual_index_t> >::type b(bSEXP);
    bitset_and(a, b);
    return R_NilValue;
END_RCPP
}
// bitset_not
Rcpp::XPtr<individual_index_t> bitset_not(const Rcpp::XPtr<individual_index_t> b);
RcppExport SEXP _individual_bitset_not(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<individual_index_t> >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(bitset_not(b));
    return rcpp_result_gen;
END_RCPP
}
// bitset_or
void bitset_or(const Rcpp::XPtr<individual_index_t> a, const Rcpp::XPtr<individual_index_t> b);
RcppExport SEXP _individual_bitset_or(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<individual_index_t> >::type a(aSEXP);
    Rcpp::traits::input_parameter< const Rcpp::XPtr<individual_index_t> >::type b(bSEXP);
    bitset_or(a, b);
    return R_NilValue;
END_RCPP
}
// bitset_sample
void bitset_sample(const Rcpp::XPtr<individual_index_t> b, double rate);
RcppExport SEXP _individual_bitset_sample(SEXP bSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<individual_index_t> >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    bitset_sample(b, rate);
    return R_NilValue;
END_RCPP
}
// bitset_to_vector
std::vector<size_t> bitset_to_vector(const Rcpp::XPtr<individual_index_t> b);
RcppExport SEXP _individual_bitset_to_vector(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<individual_index_t> >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(bitset_to_vector(b));
    return rcpp_result_gen;
END_RCPP
}
// dummy
void dummy();
static SEXP _individual_dummy_try() {
BEGIN_RCPP
    dummy();
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _individual_dummy() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_individual_dummy_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// create_event
Rcpp::XPtr<EventBase> create_event();
RcppExport SEXP _individual_create_event() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(create_event());
    return rcpp_result_gen;
END_RCPP
}
// create_targeted_event
Rcpp::XPtr<EventBase> create_targeted_event(size_t size);
RcppExport SEXP _individual_create_targeted_event(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(create_targeted_event(size));
    return rcpp_result_gen;
END_RCPP
}
// event_tick
void event_tick(const Rcpp::XPtr<EventBase> event);
RcppExport SEXP _individual_event_tick(SEXP eventSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<EventBase> >::type event(eventSEXP);
    event_tick(event);
    return R_NilValue;
END_RCPP
}
// event_process
void event_process(const Rcpp::XPtr<EventBase> event);
RcppExport SEXP _individual_event_process(SEXP eventSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<EventBase> >::type event(eventSEXP);
    event_process(event);
    return R_NilValue;
END_RCPP
}
// event_add_listener
void event_add_listener(const Rcpp::XPtr<EventBase> event, SEXP listener);
RcppExport SEXP _individual_event_add_listener(SEXP eventSEXP, SEXP listenerSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<EventBase> >::type event(eventSEXP);
    Rcpp::traits::input_parameter< SEXP >::type listener(listenerSEXP);
    event_add_listener(event, listener);
    return R_NilValue;
END_RCPP
}
// event_schedule
void event_schedule(const Rcpp::XPtr<Event> event, std::vector<double> delays);
RcppExport SEXP _individual_event_schedule(SEXP eventSEXP, SEXP delaysSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<Event> >::type event(eventSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type delays(delaysSEXP);
    event_schedule(event, delays);
    return R_NilValue;
END_RCPP
}
// event_clear_schedule
void event_clear_schedule(const Rcpp::XPtr<Event> event);
RcppExport SEXP _individual_event_clear_schedule(SEXP eventSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<Event> >::type event(eventSEXP);
    event_clear_schedule(event);
    return R_NilValue;
END_RCPP
}
// targeted_event_clear_schedule_vector
void targeted_event_clear_schedule_vector(const Rcpp::XPtr<TargetedEvent> event, std::vector<size_t> target);
RcppExport SEXP _individual_targeted_event_clear_schedule_vector(SEXP eventSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<TargetedEvent> >::type event(eventSEXP);
    Rcpp::traits::input_parameter< std::vector<size_t> >::type target(targetSEXP);
    targeted_event_clear_schedule_vector(event, target);
    return R_NilValue;
END_RCPP
}
// targeted_event_clear_schedule
void targeted_event_clear_schedule(const Rcpp::XPtr<TargetedEvent> event, const Rcpp::XPtr<individual_index_t> target);
RcppExport SEXP _individual_targeted_event_clear_schedule(SEXP eventSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<TargetedEvent> >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const Rcpp::XPtr<individual_index_t> >::type target(targetSEXP);
    targeted_event_clear_schedule(event, target);
    return R_NilValue;
END_RCPP
}
// event_get_scheduled
Rcpp::XPtr<individual_index_t> event_get_scheduled(const Rcpp::XPtr<TargetedEvent> event);
RcppExport SEXP _individual_event_get_scheduled(SEXP eventSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<TargetedEvent> >::type event(eventSEXP);
    rcpp_result_gen = Rcpp::wrap(event_get_scheduled(event));
    return rcpp_result_gen;
END_RCPP
}
// targeted_event_schedule
void targeted_event_schedule(const Rcpp::XPtr<TargetedEvent> event, const Rcpp::XPtr<individual_index_t> target, double delay);
RcppExport SEXP _individual_targeted_event_schedule(SEXP eventSEXP, SEXP targetSEXP, SEXP delaySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<TargetedEvent> >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const Rcpp::XPtr<individual_index_t> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< double >::type delay(delaySEXP);
    targeted_event_schedule(event, target, delay);
    return R_NilValue;
END_RCPP
}
// targeted_event_schedule_vector
void targeted_event_schedule_vector(const Rcpp::XPtr<TargetedEvent> event, std::vector<size_t> target, double delay);
RcppExport SEXP _individual_targeted_event_schedule_vector(SEXP eventSEXP, SEXP targetSEXP, SEXP delaySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<TargetedEvent> >::type event(eventSEXP);
    Rcpp::traits::input_parameter< std::vector<size_t> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< double >::type delay(delaySEXP);
    targeted_event_schedule_vector(event, target, delay);
    return R_NilValue;
END_RCPP
}
// targeted_event_schedule_multi_delay
void targeted_event_schedule_multi_delay(const Rcpp::XPtr<TargetedEvent> event, std::vector<size_t> target, const std::vector<double> delay);
RcppExport SEXP _individual_targeted_event_schedule_multi_delay(SEXP eventSEXP, SEXP targetSEXP, SEXP delaySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<TargetedEvent> >::type event(eventSEXP);
    Rcpp::traits::input_parameter< std::vector<size_t> >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type delay(delaySEXP);
    targeted_event_schedule_multi_delay(event, target, delay);
    return R_NilValue;
END_RCPP
}
// create_process_api
Rcpp::XPtr<ProcessAPI> create_process_api(Rcpp::XPtr<State> state, Rcpp::List params);
RcppExport SEXP _individual_create_process_api(SEXP stateSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<State> >::type state(stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(create_process_api(state, params));
    return rcpp_result_gen;
END_RCPP
}
// process_get_state
Rcpp::XPtr<individual_index_t> process_get_state(Rcpp::XPtr<ProcessAPI> api, const std::string individual, size_t size, const std::vector<std::string> states);
RcppExport SEXP _individual_process_get_state(SEXP apiSEXP, SEXP individualSEXP, SEXP sizeSEXP, SEXP statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<ProcessAPI> >::type api(apiSEXP);
    Rcpp::traits::input_parameter< const std::string >::type individual(individualSEXP);
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type states(statesSEXP);
    rcpp_result_gen = Rcpp::wrap(process_get_state(api, individual, size, states));
    return rcpp_result_gen;
END_RCPP
}
// process_get_variable
std::vector<double> process_get_variable(Rcpp::XPtr<ProcessAPI> api, const std::string individual, const std::string variable);
RcppExport SEXP _individual_process_get_variable(SEXP apiSEXP, SEXP individualSEXP, SEXP variableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<ProcessAPI> >::type api(apiSEXP);
    Rcpp::traits::input_parameter< const std::string >::type individual(individualSEXP);
    Rcpp::traits::input_parameter< const std::string >::type variable(variableSEXP);
    rcpp_result_gen = Rcpp::wrap(process_get_variable(api, individual, variable));
    return rcpp_result_gen;
END_RCPP
}
// process_get_variable_at_index
std::vector<double> process_get_variable_at_index(Rcpp::XPtr<ProcessAPI> api, const std::string individual, const std::string variable, std::vector<size_t> index);
RcppExport SEXP _individual_process_get_variable_at_index(SEXP apiSEXP, SEXP individualSEXP, SEXP variableSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<ProcessAPI> >::type api(apiSEXP);
    Rcpp::traits::input_parameter< const std::string >::type individual(individualSEXP);
    Rcpp::traits::input_parameter< const std::string >::type variable(variableSEXP);
    Rcpp::traits::input_parameter< std::vector<size_t> >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(process_get_variable_at_index(api, individual, variable, index));
    return rcpp_result_gen;
END_RCPP
}
// process_queue_state_update
void process_queue_state_update(Rcpp::XPtr<ProcessAPI> api, const std::string individual, const std::string state, std::vector<size_t> index_vector);
RcppExport SEXP _individual_process_queue_state_update(SEXP apiSEXP, SEXP individualSEXP, SEXP stateSEXP, SEXP index_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<ProcessAPI> >::type api(apiSEXP);
    Rcpp::traits::input_parameter< const std::string >::type individual(individualSEXP);
    Rcpp::traits::input_parameter< const std::string >::type state(stateSEXP);
    Rcpp::traits::input_parameter< std::vector<size_t> >::type index_vector(index_vectorSEXP);
    process_queue_state_update(api, individual, state, index_vector);
    return R_NilValue;
END_RCPP
}
// process_queue_variable_update
void process_queue_variable_update(Rcpp::XPtr<ProcessAPI> api, const std::string individual, const std::string variable, std::vector<size_t> index, const std::vector<double> values);
RcppExport SEXP _individual_process_queue_variable_update(SEXP apiSEXP, SEXP individualSEXP, SEXP variableSEXP, SEXP indexSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<ProcessAPI> >::type api(apiSEXP);
    Rcpp::traits::input_parameter< const std::string >::type individual(individualSEXP);
    Rcpp::traits::input_parameter< const std::string >::type variable(variableSEXP);
    Rcpp::traits::input_parameter< std::vector<size_t> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type values(valuesSEXP);
    process_queue_variable_update(api, individual, variable, index, values);
    return R_NilValue;
END_RCPP
}
// process_queue_variable_fill
void process_queue_variable_fill(Rcpp::XPtr<ProcessAPI> api, const std::string individual, const std::string variable, const double value);
RcppExport SEXP _individual_process_queue_variable_fill(SEXP apiSEXP, SEXP individualSEXP, SEXP variableSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<ProcessAPI> >::type api(apiSEXP);
    Rcpp::traits::input_parameter< const std::string >::type individual(individualSEXP);
    Rcpp::traits::input_parameter< const std::string >::type variable(variableSEXP);
    Rcpp::traits::input_parameter< const double >::type value(valueSEXP);
    process_queue_variable_fill(api, individual, variable, value);
    return R_NilValue;
END_RCPP
}
// create_cpp_state
Rcpp::XPtr<State> create_cpp_state(const std::vector<std::string>& individuals, const std::vector<size_t>& population_sizes);
RcppExport SEXP _individual_create_cpp_state(SEXP individualsSEXP, SEXP population_sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type individuals(individualsSEXP);
    Rcpp::traits::input_parameter< const std::vector<size_t>& >::type population_sizes(population_sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(create_cpp_state(individuals, population_sizes));
    return rcpp_result_gen;
END_RCPP
}
// state_add_states
void state_add_states(Rcpp::XPtr<State> state, const std::string& individual, const std::vector<std::string>& state_names, const std::vector<size_t>& initial_sizes);
RcppExport SEXP _individual_state_add_states(SEXP stateSEXP, SEXP individualSEXP, SEXP state_namesSEXP, SEXP initial_sizesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<State> >::type state(stateSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type individual(individualSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type state_names(state_namesSEXP);
    Rcpp::traits::input_parameter< const std::vector<size_t>& >::type initial_sizes(initial_sizesSEXP);
    state_add_states(state, individual, state_names, initial_sizes);
    return R_NilValue;
END_RCPP
}
// state_add_variable
void state_add_variable(Rcpp::XPtr<State> state, const std::string& individual, const std::string& variable, const variable_vector_t& initial);
RcppExport SEXP _individual_state_add_variable(SEXP stateSEXP, SEXP individualSEXP, SEXP variableSEXP, SEXP initialSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<State> >::type state(stateSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type individual(individualSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type variable(variableSEXP);
    Rcpp::traits::input_parameter< const variable_vector_t& >::type initial(initialSEXP);
    state_add_variable(state, individual, variable, initial);
    return R_NilValue;
END_RCPP
}
// state_apply_updates
void state_apply_updates(Rcpp::XPtr<State> state);
RcppExport SEXP _individual_state_apply_updates(SEXP stateSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<State> >::type state(stateSEXP);
    state_apply_updates(state);
    return R_NilValue;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _individual_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("void(*dummy)()");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _individual_RcppExport_registerCCallable() { 
    R_RegisterCCallable("individual", "_individual_dummy", (DL_FUNC)_individual_dummy_try);
    R_RegisterCCallable("individual", "_individual_RcppExport_validate", (DL_FUNC)_individual_RcppExport_validate);
    return R_NilValue;
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_individual_create_bitset", (DL_FUNC) &_individual_create_bitset, 1},
    {"_individual_bitset_copy", (DL_FUNC) &_individual_bitset_copy, 1},
    {"_individual_bitset_insert", (DL_FUNC) &_individual_bitset_insert, 2},
    {"_individual_bitset_remove", (DL_FUNC) &_individual_bitset_remove, 2},
    {"_individual_bitset_size", (DL_FUNC) &_individual_bitset_size, 1},
    {"_individual_bitset_max_size", (DL_FUNC) &_individual_bitset_max_size, 1},
    {"_individual_bitset_and", (DL_FUNC) &_individual_bitset_and, 2},
    {"_individual_bitset_not", (DL_FUNC) &_individual_bitset_not, 1},
    {"_individual_bitset_or", (DL_FUNC) &_individual_bitset_or, 2},
    {"_individual_bitset_sample", (DL_FUNC) &_individual_bitset_sample, 2},
    {"_individual_bitset_to_vector", (DL_FUNC) &_individual_bitset_to_vector, 1},
    {"_individual_dummy", (DL_FUNC) &_individual_dummy, 0},
    {"_individual_create_event", (DL_FUNC) &_individual_create_event, 0},
    {"_individual_create_targeted_event", (DL_FUNC) &_individual_create_targeted_event, 1},
    {"_individual_event_tick", (DL_FUNC) &_individual_event_tick, 1},
    {"_individual_event_process", (DL_FUNC) &_individual_event_process, 1},
    {"_individual_event_add_listener", (DL_FUNC) &_individual_event_add_listener, 2},
    {"_individual_event_schedule", (DL_FUNC) &_individual_event_schedule, 2},
    {"_individual_event_clear_schedule", (DL_FUNC) &_individual_event_clear_schedule, 1},
    {"_individual_targeted_event_clear_schedule_vector", (DL_FUNC) &_individual_targeted_event_clear_schedule_vector, 2},
    {"_individual_targeted_event_clear_schedule", (DL_FUNC) &_individual_targeted_event_clear_schedule, 2},
    {"_individual_event_get_scheduled", (DL_FUNC) &_individual_event_get_scheduled, 1},
    {"_individual_targeted_event_schedule", (DL_FUNC) &_individual_targeted_event_schedule, 3},
    {"_individual_targeted_event_schedule_vector", (DL_FUNC) &_individual_targeted_event_schedule_vector, 3},
    {"_individual_targeted_event_schedule_multi_delay", (DL_FUNC) &_individual_targeted_event_schedule_multi_delay, 3},
    {"_individual_create_process_api", (DL_FUNC) &_individual_create_process_api, 2},
    {"_individual_process_get_state", (DL_FUNC) &_individual_process_get_state, 4},
    {"_individual_process_get_variable", (DL_FUNC) &_individual_process_get_variable, 3},
    {"_individual_process_get_variable_at_index", (DL_FUNC) &_individual_process_get_variable_at_index, 4},
    {"_individual_process_queue_state_update", (DL_FUNC) &_individual_process_queue_state_update, 4},
    {"_individual_process_queue_variable_update", (DL_FUNC) &_individual_process_queue_variable_update, 5},
    {"_individual_process_queue_variable_fill", (DL_FUNC) &_individual_process_queue_variable_fill, 4},
    {"_individual_create_cpp_state", (DL_FUNC) &_individual_create_cpp_state, 2},
    {"_individual_state_add_states", (DL_FUNC) &_individual_state_add_states, 4},
    {"_individual_state_add_variable", (DL_FUNC) &_individual_state_add_variable, 4},
    {"_individual_state_apply_updates", (DL_FUNC) &_individual_state_apply_updates, 1},
    {"_individual_RcppExport_registerCCallable", (DL_FUNC) &_individual_RcppExport_registerCCallable, 0},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_individual(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
